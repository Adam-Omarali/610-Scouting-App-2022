import { Button, getAccordionDetailsUtilityClass, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TextField } from "@mui/material";
import {
    Chart as ChartJS,
    RadialLinearScale,
    PointElement,
    LineElement,
    Filler,
    Tooltip,
    Legend,
} from 'chart.js';
import { Radar } from 'react-chartjs-2';
import { GoogleSpreadsheet } from "google-spreadsheet";
import { useEffect, useState } from "react";
import config from '../config.json'
import { headers, ratingHeaders, simpleHeaders } from "../static/columns";
import '../static/page.css'

ChartJS.register(
    RadialLinearScale,
    PointElement,
    LineElement,
    Filler,
    Tooltip,
    Legend
);

function RadarChart(props){



    const chartColors = {
        red: 'rgba(255, 99, 132, 0.2)',
        orange: 'rgba(255, 159, 64, 0.2)',
        yellow: 'rgba(255, 205, 86, 0.2)',
        green: 'rgba(75, 192, 192, 0.2)',
        blue: 'rgba(54, 162, 235, 0.2)',
        purple: 'rgba(153, 102, 255, 0.2)',
        grey: 'rgba(231,233,237, 0.2)'
    }
    const data = {
        labels: simpleHeaders,
        datasets: [
          {
            label: 'Team Avg',
            data: props.team,
            backgroundColor: chartColors.red,
            borderColor: chartColors.red,
            pointBackgroundColor: chartColors.red,
            borderWidth: 1,
          },
          {
            label: 'Ovr Avg',
            data: props.ovr,
            backgroundColor: chartColors.green,
            borderColor: chartColors.green,
            pointBackgroundColor: chartColors.green,
            borderWidth: 1,
          },
          {
            label: 'Top 24 Avg',
            data: props.top,
            backgroundColor: chartColors.blue,
            borderColor: chartColors.blue,
            pointBackgroundColor: chartColors.blue,
            borderWidth: 1,
          },
        ],
    };
    return (
        <div style={{"backgroundColor" : "white", width : '30%'}}>
            <Radar data={data} style={{color : "white"}}/>
        </div>
    )
}

function DisplayTable(props){
    return(
        <div className="">
            <header className="title">{props.title}</header>
            <TableContainer>
                <Table sx={{ minWidth: 650 }} aria-label="simple table">
                    <TableHead>
                        <TableRow>
                        {simpleHeaders.map((header, id) => {
                            return <TableCell key={id}>{header}</TableCell>
                        })}
                        </TableRow>
                    </TableHead>
                    <TableBody>
                    {props.rows.map((row, id) => {
                        if(row['Auto_Points'] !== '' && props.title !== "Avg"){
                            if(row['Match_Number'] !== '' && row['Match_Number']){
                                return(
                                    <TableRow key={id}>
                                        {simpleHeaders.map((header, id) => {
                                            return <TableCell key={id}>{row[header]}</TableCell>
                                        })}
                                    </TableRow>
                                )
                            }
                        }
                    })}
                    {props.title === "Avg" && props.rows.length > 0 &&
                        <TableRow>
                            {simpleHeaders.map((header, id) => {
                                return <TableCell key={id}>{props.rows[13][header]}</TableCell>
                            })}
                        </TableRow>
                    }   
                    </TableBody>
                </Table>
            </TableContainer>
        </div>
    )

}

async function getSheet(teamNumber, doc){
    return doc.sheetsByTitle[teamNumber.toString()]
}

function DataRoom(props){
    const [teamNumber, setTeamNumber] = useState(610)
    const [rows, setRows] = useState([])
    const [teamAvg, setTeamAvg] = useState([])
    const [topAvg, setTopAvg] = useState([])
    const [ovrAvg, setOvrAvg] = useState([])

    const doc = new GoogleSpreadsheet(config.spreadsheet_id);

    useEffect(() => {
        async function fetchData(){
            await doc.useServiceAccountAuth({
                // env var values are copied from service account credentials generated by google
                // see "Authentication" section in docs for more info
                client_email: config.client_email,
                private_key: config.private_key,
            });
            await doc.loadInfo();
            const sheet = doc.sheetsByTitle[teamNumber.toString()]
            setRows(await sheet.getRows())

            const mainSheet = doc.sheetsByTitle['All Teams']
            const mainRows = await mainSheet.getRows()
            const ovrAvg = []
            const topAvg = []
            const team = []
            ratingHeaders.map(header => {
                if(header === 'POWER-RATING'){
                    ovrAvg.push(mainRows[0][header.toString()] / 1000)
                }
                else if(header === 'CLIMB-POINTS'){
                    ovrAvg.push(mainRows[0][header.toString()] * 10)
                }
                else{
                    ovrAvg.push(mainRows[0][header.toString()])
                }
            })
            ratingHeaders.map(header => {
                if(header === 'POWER-RATING'){
                    topAvg.push(mainRows[1][header.toString()] / 1000)
                }
                else if(header === 'CLIMB-POINTS'){
                    topAvg.push(mainRows[1][header.toString()] * 10)
                }
                else{
                    topAvg.push(mainRows[1][header.toString()])
                }
            })
            mainRows.map(row => {
                if(row['Team Number'] === teamNumber){
                    ratingHeaders.map(header => {
                        if(header === 'POWER-RATING'){
                            team.push(row[header.toString()] / 1000)
                        }
                        else if(header === 'CLIMB-POINTS'){
                            team.push(row[header.toString()] * 10)
                        }
                        else{
                            team.push(row[header.toString()] * 10)
                        }
                    })
                }
            })

            setOvrAvg(ovrAvg)
            setTopAvg(topAvg)
            setTeamAvg(team)

        }
        fetchData()
    }, [teamNumber])
    

    return (
        <div className={props.all ? "App-header" : ""} style={{alignContent : props.all ? 'flex-start' : '', paddingLeft : props.all ? '20px' : ''}}>
            <div className="padding-top">
                <TextField placeholder="Team Number" label="Team Number" value={teamNumber} onChange={(e) => {setTeamNumber(e.target.value)}}>Team Number</TextField>
            </div>
            {/* <div style={{width : "20vw"}}>
                <RadarChart ovr={ovrAvg} top={topAvg} team={teamAvg}/>
            </div> */}
            <div className="padding-top">
                <img src={`https://github.com/LeonLiur/notScoutnotData/blob/main/${teamNumber}_PostDay2.png?raw=true`} style={{backgroundColor:'white'}}/>
            </div>

            {props.all && <DisplayTable rows={rows} title={"All Data"}/>}
            <DisplayTable rows={rows} title={"Avg"}/>

            {props.all && <>
            <header className="title">All Data</header>
            <TableContainer>
                <Table sx={{ minWidth: 650 }} aria-label="simple table">
                    <TableHead>
                        <TableRow>
                        {headers.map((header, id) => {
                            return <TableCell key={id}>{header}</TableCell>
                        })}
                        </TableRow>
                    </TableHead>
                    <TableBody>
                    {rows.map((row, id) => {
                        if(row['Auto_Points'] !== ''){
                            if(row['Match_Number'] !== '' && row['Match_Number']){
                                return(
                                    <TableRow key={id}>
                                        {headers.map((header, id) => {
                                            return <TableCell key={id}>{row[header]}</TableCell>
                                        })}
                                    </TableRow>
                                )
                            }
                        }
                    })}
                    </TableBody>
                </Table>
            </TableContainer>

            <header className="title">Avg</header>
            <TableContainer>
                <Table sx={{ minWidth: 650 }} aria-label="simple table">
                    <TableHead>
                        <TableRow>
                        {headers.map((header, id) => {
                            return <TableCell key={id}>{header}</TableCell>
                        })}
                        </TableRow>
                    </TableHead>
                    <TableBody>
                    {rows.length > 0 &&
                        <TableRow>
                            {headers.map((header, id) => {
                                return <TableCell key={id}>{rows[13][header]}</TableCell>
                            })}
                        </TableRow>
                    }   
                    </TableBody>
                </Table>
            </TableContainer>
            </>}
            {props.setPage !== null && 
            <div className="padding-top">
                <Button onClick={() => props.setPage("home")}>Back Home</Button>
            </div>
            }

        </div>
    )



}

export default DataRoom;