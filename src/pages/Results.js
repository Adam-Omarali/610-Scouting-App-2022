import { Button, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from "@mui/material";
import state from "../static/state";
import config from '../config.json'
import { useEffect } from "react";
const { GoogleSpreadsheet } = require('google-spreadsheet');

async function createSpreadsheet(doc){
    if(doc.sheetsByTitle[`${state.general.teamNumber}`] === undefined){
        const sheet2 = await doc.sheetsByTitle['All Teams']
        await sheet2.addRow({Team_Number : state.general.teamNumber})
        return await doc.addSheet({ title: state.general.teamNumber.toString(), headerValues: 
            ['Teleop_Points', 'Auto_Points', 'Climb_Points', 'Total_Points', 'Total_Balls_Shot', 'Teleop_Accuracy', 
            'Auto_Accuracy', 'Avg_Cycle_Time', 'Total_Cycles', 'Time_Played_Defense', 'Successful_Climb', 'Notes',
            'Total_Teleop_Upper_Goal_Makes', 'Total_Teleop_Upper_Goal_Misses', 'Total_Teleop_Lower_Goal_Makes', 
            'Total_Teleop_Lower_Goal_Misses'] });
    }
    return doc.sheetsByTitle[`${state.general.teamNumber}`]
}

function Results(props){
    const doc = new GoogleSpreadsheet(config.spreadsheet_id);

    let madeShotsTeleop = state.teleop.madeHighShots + state.teleop.madeLowShots
    let missedTeleop = state.teleop.missedHighShots + state.teleop.missedLowShots
    let cycleTimes = state.teleop.cycleTimes

    let team = state.general.teamNumber
    let avgCycleTime = 0;
    [...cycleTimes].forEach(element => {
        avgCycleTime += element
    });
    avgCycleTime /= (state.teleop.cycleTimes.length + 1)
    let teleopPoints = (state.teleop.madeHighShots) * 2 + state.teleop.madeLowShots
    let autoPoints = state.auto.upperScored * 4 + state.auto.lowerScored * 2 + (state.auto.offAutoLine ? 4 : 0)
    let climbPoints = state.climb.successful ? state.climb.attemptedPoints : 0
    let totalPoints = teleopPoints + autoPoints + climbPoints
    let shotAccuracyTeleop = madeShotsTeleop / (madeShotsTeleop + missedTeleop)
    let defenseTime = state.teleop.defenseTime
    let cycles = (missedTeleop + madeShotsTeleop) / 2

    let totalShot = madeShotsTeleop + missedTeleop
    let shotAccuracyAuto = (state.auto.upperScored + state.auto.lowerScored) / (state.auto.upperMissed + state.auto.lowerMissed + state.auto.upperScored + state.auto.lowerScored)
    let successfulClimb = state.climb.successful ? 1 : 0
    let notes = state.general.notes
    let upperMakes = state.teleop.madeHighShots
    let lowerMakes = state.teleop.madeLowShots
    let upperMisses = state.teleop.missedHighShots
    let lowerMisses = state.teleop.missedLowShots

    async function addRow(doc, sheet){
        const newRow = await sheet.addRow({
            Teleop_Points : teleopPoints, Auto_Points : autoPoints, Climb_Points : climbPoints, Total_Points : totalPoints, 
            Total_Balls_Shot : totalShot, Teleop_Accuracy : shotAccuracyTeleop, Auto_Accuracy : shotAccuracyAuto, 
            Avg_Cycle_Time : avgCycleTime, Total_Cycles : cycles, Time_Played_Defense : defenseTime, Successful_Climb : successfulClimb, 
            Notes : notes, Total_Teleop_Upper_Goal_Makes : upperMakes, Total_Teleop_Upper_Goal_Misses : upperMisses, 
            Total_Teleop_Lower_Goal_Makes : lowerMakes, Total_Teleop_Lower_Goal_Misses : lowerMisses
        })
    }

    useEffect(() => {
        async function fectchData(){
            await doc.useServiceAccountAuth({
                // env var values are copied from service account credentials generated by google
                // see "Authentication" section in docs for more info
                client_email: config.client_email,
                private_key: config.private_key,
            });
            await doc.loadInfo();
    
            const sheet = await createSpreadsheet(doc)
            addRow(doc, sheet)
        }
    
        fectchData();
    }, [])


    return (
        <div className="App-header">
            <TableContainer>
                <Table sx={{ minWidth: 650 }} aria-label="simple table">
                    <TableHead>
                        <TableRow>
                            <TableCell>Team Number</TableCell>
                            <TableCell align="center">Avg Cycle Time</TableCell>
                            <TableCell align="center">Teleop Points</TableCell>
                            <TableCell align="center">Auto Points</TableCell>
                            <TableCell align="center">Climb Points</TableCell>
                            <TableCell align="center">Total Points</TableCell>
                            <TableCell alight="center">Shot Accuracy</TableCell>
                            <TableCell alight="center">Defense Time</TableCell>
                            <TableCell alight="center">Cycles</TableCell>
                            <TableCell alight="center">Total Shots</TableCell>
                        </TableRow>
                    </TableHead>
                    <TableBody>
                        <TableRow>
                            <TableCell>{team}</TableCell>
                            <TableCell align="center">{avgCycleTime.toFixed(3)}</TableCell>
                            <TableCell align="center">{teleopPoints}</TableCell>
                            <TableCell align="center">{autoPoints}</TableCell>
                            <TableCell align="center">{climbPoints}</TableCell>
                            <TableCell align="center">{totalPoints}</TableCell>
                            <TableCell align="center">{(shotAccuracyTeleop*100).toFixed(3)}</TableCell>
                            <TableCell align="center">{defenseTime}</TableCell>
                            <TableCell align="center">{cycles}</TableCell>
                            <TableCell align="center">{totalShot}</TableCell>
                        </TableRow>
                    </TableBody>
                </Table>
            </TableContainer>
            <div className="padding-top">
                <Button variant="contained" onClick={() => props.setPage("home")}>Back Home</Button>
            </div>
        </div>
    )
}

export default Results;